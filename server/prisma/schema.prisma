// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma db push
// npx prisma generate

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Environment {
  id                    String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt             DateTime         @default(now()) @map(name: "created_at")
  updatedAt             DateTime         @updatedAt @map(name: "updated_at")
  // type                  EnvironmentType
  product               Product          @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId             String           @db.ObjectId
  // widgetSetupCompleted  Boolean          @default(false)
  // appSetupCompleted     Boolean          @default(false)
  // websiteSetupCompleted Boolean          @default(false)
  forms               Form[]
  // people              Person[]
  // actionClasses         ActionClass[]
  // attributeClasses      AttributeClass[]
  // apiKeys               ApiKey[]
  // webhooks              Webhook[]
  // tags                  Tag[]
  // segments              Segment[]
  // integration           Integration[]

  @@index([productId])
}

// model Person {
//   id                String            @id @default(auto()) @map("_id") @db.ObjectId
//   userId            String            @unique
//   createdAt         DateTime          @default(now())
//   updatedAt         DateTime          @updatedAt
//   environment       Environment?      @relation(fields: [environmentId], references: [id])
//   environmentId     String?           @db.ObjectId
//   displays          Display[]
// }

enum DisplayStatus {
  seen
  responded
}

enum FormStatus {
  draft
  scheduled
  inProgress
  paused
  completed
}

model Form {
  id                  String                  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime                @default(now()) @map(name: "created_at")
  updatedAt           DateTime                @updatedAt @map(name: "updated_at")
  name                String
  redirectUrl         String
  environment         Environment             @relation(fields: [environmentId], references: [id])
  environmentId         String                @db.ObjectId
  creator             User?                   @relation(fields: [createdBy], references: [id])
  createdBy           String?                 @db.ObjectId
  status              FormStatus              @default(draft)
  /// @zod.custom(imports.ZFormWelcomeCard)
  /// [FormWelcomeCard]
  welcomeCard         Json                    @default("{\"enabled\": false}")
  /// @zod.custom(imports.ZFormQuestions)
  /// [FormQuestions]
  questions           Json                    @default("[]")
  /// @zod.custom(imports.ZFormThankYouCard)
  /// [FormThankYouCard]
  thankYouCard        Json                    @default("{\"enabled\": false}")
  responses           Response[]
  displays            Display[]
  products            Product[]
  autoClose           Int?
  delay               Int?                     @default(0)
  styling             Json?
  verifyEmail         Json?
}

enum IdentityProvider {
  email
  github
  google
  azuread
  openid
}

model User {
  id                        String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                 DateTime         @default(now()) @map(name: "created_at")
  updatedAt                 DateTime         @updatedAt @map(name: "updated_at")
  name                      String
  email                     String          
  emailVerified             DateTime?        @map(name: "email_verified")
  imageUrl                  String?
  password                  String?
  identityProvider          IdentityProvider @default(email)
  identityProviderAccountId String?
  accounts                  Account[]
  responseNotes             ResponseNote[]
  notificationSettings      Json              @default("{}")
  forms                     Form[]                   

  @@index([email])
}

model Account {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime         @default(now()) @map(name: "created_at")
  updatedAt         DateTime         @updatedAt @map(name: "updated_at")
  user              User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String           @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  access_token      String?  @db.String
  refresh_token     String?  @db.String
  expires_at        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Response {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime          @default(now()) @map(name: "created_at")
  updatedAt        DateTime          @updatedAt @map(name: "updated_at")
  finished         Boolean           @default(false)
  forms           Form               @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId           String            @db.ObjectId
  notes            ResponseNote[]
  /// @zod.custom(imports.ZResponseData)
  /// [ResponseData]
  data             Json              @default("{}")
  /// @zod.custom(imports.ZResponseTtc)
  /// [ResponseTtc]
  ttc              Json              @default("{}")
  /// @zod.custom(imports.ZResponseMeta)
  /// [ResponseMeta]
  meta             Json              @default("{}")
  /// @zod.custom(imports.ZResponsePersonAttributes)
  /// [ResponsePersonAttributes]
  personAttributes Json?
  // singleUseId, used to prevent multiple responses
  singleUseId      String?
  language         String?

  @@unique([formId, singleUseId])
  @@index([formId, createdAt]) // to determine monthly response count
  @@index([ createdAt]) // to determine monthly identified users (persons)
  @@index([formId])
}

model Display {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime       @default(now()) @map(name: "created_at")
  updatedAt  DateTime       @updatedAt @map(name: "updated_at")
  form       Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId     String        @db.ObjectId
  status     DisplayStatus?
  // person     Person        @relation(fields: [personId], references: [id])
  // personId   String        @db.ObjectId
}

enum WidgetPlacement {
  bottomLeft
  bottomRight
  topLeft
  topRight
  center
}

model Product {
  id                    String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt             DateTime          @default(now()) @map(name: "created_at")
  updatedAt             DateTime          @updatedAt @map(name: "updated_at")
  name                  String
  form                  Form              @relation(fields: [formId], references: [id], onDelete: Cascade)
  environments          Environment[]     @relation
  formId                String            @db.ObjectId
  brandColor            String
  highlightBorderColor  String
  styling               Json
  // config                Json              @default("{}")
  recontactDays         Int               @default(7)
  // linkFormBranding      Boolean           @default(true)
  placement            WidgetPlacement    @default(bottomRight)
  clickOutsideClose    Boolean            @default(true)
  darkOverlay          Boolean            @default(false)
  logoUrl              Json?

  @@unique([name])
}

model ShortUrl {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime         @default(now()) @map(name: "created_at")
  updatedAt         DateTime         @updatedAt @map(name: "updated_at")
  url               String           @unique
}

model ResponseNote {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  responseId String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @db.ObjectId
  text       String
  isResolved Boolean  @default(false)
  isEdited   Boolean  @default(false)

  @@index([responseId])
}