// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma db push
// npx prisma generate

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Environment {
  id                    String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt             DateTime         @default(now()) @map(name: "created_at")
  updatedAt             DateTime         @updatedAt @map(name: "updated_at")
  // type                  EnvironmentType
  // product               Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId             String
  widgetSetupCompleted  Boolean          @default(false)
  appSetupCompleted     Boolean          @default(false)
  websiteSetupCompleted Boolean          @default(false)
  // surveys               Survey[]
  // people                Person[]
  // actionClasses         ActionClass[]
  // attributeClasses      AttributeClass[]
  // apiKeys               ApiKey[]
  // webhooks              Webhook[]
  // tags                  Tag[]
  // segments              Segment[]
  // integration           Integration[]

  @@index([productId])
}

model Person {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  userId            String            @unique
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  // displays          Display[]
}

enum DisplayStatus {
  seen
  responded
}

model Display {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime       @default(now()) @map(name: "created_at")
  updatedAt  DateTime       @updatedAt @map(name: "updated_at")
  // survey     Survey         @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  surveyId   String
  // person     Person?        @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId   String?
  responseId String?        @unique
  status     DisplayStatus?

  @@index([surveyId])
  @@index([id, createdAt])
}

enum SurveyStatus {
  draft
  scheduled
  inProgress
  paused
  completed
}

model Form {
  id                  String                  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime                @default(now()) @map(name: "created_at")
  updatedAt           DateTime                @updatedAt @map(name: "updated_at")
  name                String
  // createdBy           String?
  status              SurveyStatus            @default(draft)
  /// @zod.custom(imports.ZFormWelcomeCard)
  /// [SurveyWelcomeCard]
  welcomeCard         Json                    @default("{\"enabled\": false}")
  /// @zod.custom(imports.ZSurveyQuestions)
  /// [SurveyQuestions]
  questions           Json                   @default("[]")
  /// @zod.custom(imports.ZSurveyThankYouCard)
  /// [SurveyThankYouCard]
  thankYouCard        Json                    @default("{\"enabled\": false}")
  // responses           Response[]

}

enum IdentityProvider {
  email
  github
  google
  azuread
  openid
}

model User {
  id                        String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                 DateTime         @default(now()) @map(name: "created_at")
  updatedAt                 DateTime         @updatedAt @map(name: "updated_at")
  name                      String
  email                     String           @unique
  emailVerified             DateTime?        @map(name: "email_verified")
  imageUrl                  String?
  password                  String?
  identityProvider          IdentityProvider @default(email)
  identityProviderAccountId String?
  accounts                  Account[]
}

model Account {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime         @default(now()) @map(name: "created_at")
  updatedAt         DateTime         @updatedAt @map(name: "updated_at")
  user              User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String           @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  access_token      String?  @db.String
  refresh_token     String?  @db.String
  expires_at        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Response {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime          @default(now()) @map(name: "created_at")
  updatedAt        DateTime          @updatedAt @map(name: "updated_at")
  finished         Boolean           @default(false)
  // form             Form              @relation(fields: [formId], references: [id], onDelete: Cascade)
  // formId           String            @db.ObjectId
}