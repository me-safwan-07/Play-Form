// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma db push
// npx prisma generate

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model Person {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  userId        String
  createdAt     DateTime      @default(now()) @map(name: "created_at")
  updatedAt     DateTime      @updatedAt @map(name: "updated_at")
  environment   Environment   @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId String        @db.ObjectId
  responses     Response[]
  displays      Display[]

  @@unique([environmentId, userId])
  @@index([environmentId])
}

model Response {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime          @default(now()) @map(name: "created_at")
  updatedAt        DateTime          @updatedAt @map(name: "updated_at")
  finished         Boolean           @default(false)
  form             Form              @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId           String            @db.ObjectId
  person           Person?           @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId         String            @db.ObjectId
  notes            ResponseNote[]
  /// @zod.custom(imports.ZResponseData)
  /// [ResponseData]
  data             Json              @default("{}")
  tags             TagsOnResponses[]
  // singleUseId, used to prevent multiple responses
  singleUseId      String?

  @@unique([formId, singleUseId])
  @@index([formId, createdAt]) // to determine monthly response count
  @@index([personId, createdAt]) // to determine monthly identified users (persons)
  @@index([formId])
}

model ResponseNote {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  responseId String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @db.ObjectId
  text       String
  isResolved Boolean  @default(false)
  isEdited   Boolean  @default(false)

  @@index([responseId])
}

model Tag {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime          @default(now()) @map(name: "created_at")
  updatedAt     DateTime          @updatedAt @map(name: "updated_at")
  name          String
  responses     TagsOnResponses[]
  environmentId String            @db.ObjectId
  environment   Environment       @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@unique([environmentId, name])
  @@index([environmentId])
}

model TagsOnResponses {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  responseId String   @db.ObjectId
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  tagId      String   @db.ObjectId
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([responseId, tagId])
  @@index([responseId])
}

enum FormStatus {
  draft
  scheduled
  inProgress
  paused
  completed
}

enum DisplayStatus {
  seen
  responded
}

model Display {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime       @default(now()) @map(name: "created_at")
  updatedAt  DateTime       @updatedAt @map(name: "updated_at")
  form       Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId     String        @db.ObjectId
  status     DisplayStatus?
  person     Person        @relation(fields: [personId], references: [id])
  personId   String        @db.ObjectId

  @@index([formId])
  @@index([personId, createdAt])
}

enum displayOptions {
  displayOnce
  displayMultiple
  displaySome
  respondMultiple
}

model Form {
  id                  String                  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime                @default(now()) @map(name: "created_at")
  updatedAt           DateTime                @updatedAt @map(name: "updated_at")
  name                String
  redirectUrl         String?
  environment         Environment             @relation(fields: [environmentId], references: [id])
  environmentId       String                  @db.ObjectId
  creator             User?                   @relation(fields: [createdBy], references: [id])
  createdBy           String?                 @db.ObjectId
  status              FormStatus              @default(draft)
  /// @zod.custom(imports.ZFormWelcomeCard)
  /// [FormWelcomeCard]
  welcomeCard         Json                    @default("{\"enabled\": false}")
  /// @zod.custom(imports.ZFormQuestions)
  /// [FormQuestions]
  questions           Json                    @default("[]")
  /// @zod.custom(imports.ZFormThankYouCard)
  /// [FormThankYouCard]
  thankYouCard        Json                    @default("{\"enabled\": false}")
  responses           Response[]
  displayOption       displayOptions          @default(displayOnce)
  recontactDays       Int?
  displayLimit        Int?
  // triggers todoList
  displays            Display[]
  autoClose           Int?
  autoComplete        Int?
  delay               Int?                     @default(0)
  runOnDate          DateTime?
  closeOnDate        DateTime?
  formClosedMessage  Json?
  segmentId          String?                 @db.ObjectId
  segment            Segment?                @relation(fields: [segmentId], references: [id])

  /// @zod.custom(imports.ZSurveyProductOverwrites)
  /// [SurveyProductOverwrites]
  productOverwrites Json?

  /// @zod.custom(imports.ZSurveyStyling)
  /// [SurveyStyling]
  styling Json?

  /// @zod.custom(imports.ZSurveySingleUse)
  /// [SurveySingleUse]
  singleUse Json? @default("{\"enabled\": false, \"isEncrypted\": true}")

  /// @zod.custom(imports.ZSurveyVerifyEmail)
  /// [SurveyVerifyEmail]
  verifyEmail        Json?
  pin                String?
  resultShareKey     String?          @unique
  displayPercentage  Float?

  @@index([environmentId, updatedAt])
  @@index([segmentId])
}

enum EnvironmentType {
  production
  development
}

model Environment {
  id                    String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt             DateTime         @default(now()) @map(name: "created_at")
  updatedAt             DateTime         @updatedAt @map(name: "updated_at")
  type                  EnvironmentType
  product               Product          @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId             String           @db.ObjectId
  forms                 Form[]
  people                Person[]
  tags                  Tag[]
  segments              Segment[]

  @@index([productId])
}

model Product {
  id                    String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt             DateTime          @default(now()) @map(name: "created_at")
  updatedAt             DateTime          @updatedAt @map(name: "updated_at")
  name                  String
  organization         Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId       String             @db.ObjectId
  environments          Environment[] 
  brandColor            String? // deprecated; use styling.brandColor instead
  highlightBorderColor  String? // deprecated
  /// @zod.custom(imports.ZProductStyling)
  /// [Styling]
  styling               Json            @default("{\"allowStyleOverwrite\":true}")
  /// @zod.custom(imports.ZProductConfig)
  /// [ProductConfig]
  config                Json              @default("{}")
  recontactDays         Int               @default(7)
  linkFormBranding      Boolean           @default(true)
  clickOutsideClose     Boolean            @default(true)
  darkOverlay           Boolean            @default(false)
  /// @zod.custom(imports.ZLogo)
  /// [Logo]
  logo                  Json?

  @@unique([name])
}

enum IdentityProvider {
  email
  google
  facebook
}

model Organization {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime     @default(now()) @map(name: "created_at")
  updatedAt   DateTime     @updatedAt @map(name: "updated_at")
  name        String
  products    Product[]
}

model Account {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime         @default(now()) @map(name: "created_at")
  updatedAt         DateTime         @updatedAt @map(name: "updated_at")
  user              User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String           @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  access_token      String?  @db.String
  refresh_token     String?  @db.String
  expires_at        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model User {
  id                        String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                 DateTime         @default(now()) @map(name: "created_at")
  updatedAt                 DateTime         @updatedAt @map(name: "updated_at")
  name                      String
  email                     String          
  emailVerified             DateTime?        @map(name: "email_verified")
  imageUrl                  String?
  password                  String?
  identityProvider          IdentityProvider @default(email)
  identityProviderAccountId String?
  accounts                  Account[]
  responseNotes             ResponseNote[]
  notificationSettings      Json              @default("{}")
  forms                     Form[]                   

  @@index([email])
}



model ShortUrl {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime         @default(now()) @map(name: "created_at")
  updatedAt         DateTime         @updatedAt @map(name: "updated_at")
  url               String           @unique
}

model Segment {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  title         String
  description   String?
  isPrivate     Boolean     @default(true)
  /// @zod.custom(imports.ZSegmentFilters)
  /// [SegmentFilter]
  filters       Json        @default("[]")
  environmentId String      @db.ObjectId
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  forms         Form[]

  @@unique([environmentId, title])
  @@index([environmentId])
} 