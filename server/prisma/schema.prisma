// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma db push

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Person {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  userId            String            @unique
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  // displays          Display[]
}

model Response {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime          @default(now()) @map(name: "created_at")
  updatedAt        DateTime          @updatedAt @map(name: "updated_at")
  finished         Boolean           @default(false)
  // survey           Survey            @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  surveyId         String
  // person           Person?           @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId         String?
  // notes            ResponseNote[]
  /// @zod.custom(imports.ZResponseData)
  /// [ResponseData]
  // data             Json              @default("{}")
  /// @zod.custom(imports.ZResponseTtc)
  /// [ResponseTtc]
  // ttc              Json              @default("{}")
  /// @zod.custom(imports.ZResponseMeta)
  /// [ResponseMeta]
  // meta             Json              @default("{}")
  // tags             TagsOnResponses[]
  /// @zod.custom(imports.ZResponsePersonAttributes)
  /// [ResponsePersonAttributes]
  // personAttributes Json?
  // singleUseId, used to prevent multiple responses
  singleUseId      String?
  // language         String?

  @@unique([surveyId, singleUseId])
  @@index([surveyId, createdAt]) // to determine monthly response count
  @@index([personId, createdAt]) // to determine monthly identified users (persons)
  @@index([surveyId])
}

enum DisplayStatus {
  seen
  responded
}

model Display {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime       @default(now()) @map(name: "created_at")
  updatedAt  DateTime       @updatedAt @map(name: "updated_at")
  // survey     Survey         @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  surveyId   String
  // person     Person?        @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId   String?
  responseId String?        @unique
  status     DisplayStatus?

  @@index([surveyId])
  @@index([id, createdAt])
}

model Form {
  id                  String                  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime                @default(now()) @map(name: "created_at")
  updatedAt           DateTime                @updatedAt @map(name: "updated_at")
  name                String
  redirectUrl         String?
  // type                SurveyType              @default(web)
  // environment         Environment             @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId       String
  // creator             User?                   @relation(fields: [createdBy], references: [id])
  createdBy           String?
  // status              SurveyStatus            @default(draft)
  /// @zod.custom(imports.ZSurveyWelcomeCard)
  /// [SurveyWelcomeCard]
  welcomeCard         Json                    @default("{\"enabled\": false}")
  /// @zod.custom(imports.ZSurveyQuestions)
  /// [SurveyQuestions]
  questions           Json                    @default("[]")
  /// @zod.custom(imports.ZSurveyThankYouCard)
  /// [SurveyThankYouCard]
  thankYouCard        Json                    @default("{\"enabled\": false}")
  /// @zod.custom(imports.ZSurveyHiddenFields)
  /// [SurveyHiddenFields]
  hiddenFields        Json                    @default("{\"enabled\": false}")
  // responses           Response[]
  // displayOption       displayOptions          @default(displayOnce)
  recontactDays       Int?
  displayLimit        Int?
  // triggers            SurveyTrigger[]
  /// @zod.custom(imports.ZSurveyInlineTriggers)
  /// [SurveyInlineTriggers]
  inlineTriggers      Json?
  // attributeFilters    SurveyAttributeFilter[]
  // displays            Display[]
  autoClose           Int?
  autoComplete        Int?
  delay               Int                     @default(0)
  runOnDate           DateTime?
  closeOnDate         DateTime?
  /// @zod.custom(imports.ZSurveyClosedMessage)
  /// [SurveyClosedMessage]
  surveyClosedMessage Json?
  segmentId           String?
  // segment             Segment?                @relation(fields: [segmentId], references: [id])

  /// @zod.custom(imports.ZSurveyProductOverwrites)
  /// [SurveyProductOverwrites]
  productOverwrites Json?

  /// @zod.custom(imports.ZSurveyStyling)
  /// [SurveyStyling]
  styling Json?

  /// @zod.custom(imports.ZSurveySingleUse)
  /// [SurveySingleUse]
  singleUse Json? @default("{\"enabled\": false, \"isEncrypted\": true}")

  /// @zod.custom(imports.ZSurveyVerifyEmail)
  /// [SurveyVerifyEmail]
  verifyEmail        Json?
  pin                String?
  resultShareKey     String?          @unique
  // displayPercentage  Decimal?
  // languages          SurveyLanguage[]
  // showLanguageSwitch Boolean?

  @@index([environmentId, updatedAt])
  @@index([segmentId])
}